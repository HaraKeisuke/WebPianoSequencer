{"version":3,"sources":["manager/AudioManager.ts","models/Scale.ts","component/piano/Note.tsx","manager/SequenceManager.ts","component/piano/Key.tsx","component/piano/Octave.tsx","App.tsx","registerServiceWorker.ts","index.tsx"],"names":["AudioManager","ctx","_window","AudioContext","piano","SoundFont","instrument","this","then","note","play","Instance","window","webkitAudioContext","ScaleName","Note","state","isStarted","height","setState","document","body","scrollHeight","Container","className","React","styled","div","props","Scale","scale","octave","Csharp","Dsharp","Fsharp","Gsharp","Asharp","SequenceManager","OnSequence","Subject","tempos","bpm","timer","midi","Midi","sequenceNotes","playNotes","trackNum","path","fromUrl","header","tracks","notes","sort","a","b","ticks","Object","assign","getInstance","startTime","currentTime","setInterval","playTime","length","shift","onNext","name","C","D","E","F","G","A","B","None","ConvertScaleNameFromString","pitch","clearInterval","Key","isActive","where","e","subscribe","OnNoteCreate","bind","KeyComponent","IsBlack","BlackKey","WhiteKey","onClick","onClickKey","map","children","stopPropagation","toString","_notes","push","setTimeout","BaseKey","Octave","style","display","flexWrap","width","minWidth","backgroundColor","App","load","MidiManager","Keyboard","Styled","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.eded3d89.chunk.js","sourcesContent":["import SoundFont from \"soundfont-player\";\n\nexport default class AudioManager {\n  ctx: AudioContext = new _window.AudioContext();\n\n  private piano: any;\n\n  load() {\n    SoundFont.instrument(this.ctx as any, 'acoustic_grand_piano').then((piano) => {\n      this.piano = piano as SoundFont.Player;\n    });\n  }\n\n  play(note: string) {\n    this.piano.play(note);\n  }\n\n  static Instance: AudioManager;\n  static getInstance(): AudioManager {\n    if (!this.Instance) {\n      this.Instance = new AudioManager();\n    }\n    return this.Instance;\n  }\n}\n\nlet _window = window as any;\n_window.AudioContext = _window.AudioContext || _window.webkitAudioContext;","export default class Scale {\n  constructor(public scale: ScaleName, public octave: number) { }\n\n  IsBlack(): boolean {\n    if (this.scale == ScaleName.Csharp || this.scale == ScaleName.Dsharp || this.scale == ScaleName.Fsharp || this.scale == ScaleName.Gsharp || this.scale == ScaleName.Asharp) {\n      return true\n    }\n    return false;\n  }\n}\n\nexport enum ScaleName {\n  C = \"C\", Csharp = \"C#\", D = \"D\", Dsharp = \"D#\", E = \"E\", F = \"F\", Fsharp = \"F#\", G = \"G\", Gsharp = \"G#\", A = \"A\", Asharp = \"A#\", B = \"B\", None = \"Nonel\"\n}\n\n\nexport const ConvertScaleNameFromString = (name: string): ScaleName => {\n  switch (name) {\n    case \"C\":\n      return ScaleName.C;\n    case \"C#\":\n      return ScaleName.Csharp\n    case \"D\":\n      return ScaleName.D;\n    case \"D#\":\n      return ScaleName.Dsharp\n    case \"E\":\n      return ScaleName.E;\n    case \"F\":\n      return ScaleName.F\n    case \"F#\":\n      return ScaleName.Fsharp;\n    case \"G\":\n      return ScaleName.G\n    case \"G#\":\n      return ScaleName.Gsharp;\n    case \"A\":\n      return ScaleName.A;\n    case \"A#\":\n      return ScaleName.Asharp;\n    case \"B\":\n      return ScaleName.B;\n    default:\n      return ScaleName.None\n  }\n}\n","import * as React from \"react\";\nimport Scale, { ScaleName } from \"../../models/Scale\";\nimport styled from \"styled-components\";\nimport AudioManager from \"../../manager/AudioManager\";\nimport SequenceManager from \"../../manager/SequenceManager\";\n\nexport default class Note extends React.Component<IProp>{\n  state = { isStarted: false, height: 100 };\n\n  componentDidMount() {\n    this.setState({ isStarted: true, height: document.body.scrollHeight - 300 });\n  }\n\n  render() {\n    return (\n      <Container className={this.state.isStarted ? \"isStarted\" : \"\"} height={this.state.height} />\n    )\n  }\n\n}\n\ninterface IProp {\n  scale: Scale;\n  children?: any;\n  width?: number;\n}\n\nconst Container = styled.div`\n  position:absolute;\n  background-color: white;\n  width: 30px;\n  height: 10px;\n  border-radius: 15px;\n  transition-duration:5s;\n  transition-timing-function: linear;\n  top: calc(-100vh + 400px);\n  &.isStarted {\n    transform: ${(props: { height: number }) => `translateY(${props.height}px)`};\n  }\n`\n","import { ScaleName, ConvertScaleNameFromString } from './../models/Scale';\nimport { Subject } from 'rx';\nimport { Midi } from '@tonejs/midi'\nimport { Note } from '@tonejs/midi/dist/Note'\nimport { TempoEvent } from '@tonejs/midi/dist/Header';\nimport AudioManager from './AudioManager';\nimport Scale from '../models/Scale';\n\nexport default class SequenceManager {\n  public OnSequence: Subject<Scale> = new Subject<Scale>();\n\n  private tempos: TempoEvent[] = [];\n  private bpm: number = 120;\n  private timer: any;\n  private midi: Midi = new Midi();\n  private sequenceNotes: Note[] = [];\n  private playNotes: Note[] = [];\n  private trackNum: number = 0;\n\n  async load(path: string, trackNum: number = 0) {\n    this.midi = await Midi.fromUrl(path);\n    this.tempos = this.midi.header.tempos;\n    this.playNotes = this.midi.tracks[trackNum].notes.sort((a, b) => { return a.ticks - b.ticks });\n    this.sequenceNotes = Object.assign([], this.playNotes);\n    this.trackNum = trackNum;\n  }\n\n  play() {\n    let ctx = AudioManager.getInstance().ctx;\n    let startTime = ctx.currentTime + 5; // 5秒バッファとして持っておく\n    this.timer = setInterval(() => {\n      let playTime = ctx.currentTime - startTime;\n      if (this.tempos.length > 0 && this.tempos[0].ticks / 1000 < playTime) {\n        this.bpm = this.tempos[0].bpm;\n        this.tempos.shift();\n      }\n      if (this.sequenceNotes.length > 0 && ((this.sequenceNotes[0].ticks * (120 / this.bpm)) / 1000) - 5 < playTime) {\n        this.OnSequence.onNext(new Scale(ConvertScaleNameFromString(this.sequenceNotes[0].pitch), this.sequenceNotes[0].octave));\n        this.sequenceNotes.shift();\n      }\n      if (this.playNotes.length > 0 && (this.playNotes[0].ticks * (120 / this.bpm)) / 1000 < playTime) {\n        AudioManager.getInstance().play(this.playNotes[0].pitch + this.playNotes[0].octave);\n        this.playNotes.shift();\n      }\n    }, 30);\n  }\n\n  stop() {\n    this.playNotes = this.midi.tracks[this.trackNum].notes.sort((a, b) => { return a.ticks - b.ticks });\n    this.sequenceNotes = Object.assign([], this.playNotes);\n    this.tempos = this.midi.header.tempos;\n    clearInterval(this.timer);\n    this.timer = null;\n  }\n\n\n  static Instance: SequenceManager;\n  static getInstance(): SequenceManager {\n    if (!this.Instance) {\n      this.Instance = new SequenceManager();\n    }\n    return this.Instance;\n  }\n}\n","import * as React from \"react\";\nimport Scale, { ScaleName } from \"../../models/Scale\";\nimport styled from \"styled-components\";\nimport AudioManager from \"../../manager/AudioManager\";\nimport Note from \"./Note\";\nimport SequenceManager from \"../../manager/SequenceManager\";\n\n\nexport default class Key extends React.Component<IProp> {\n  state: IState = { notes: [], isActive: false };\n\n  componentDidMount() {\n    SequenceManager.getInstance().OnSequence.where(e => e.scale === this.props.scale.scale && e.octave === this.props.scale.octave).subscribe(this.OnNoteCreate.bind(this));\n  }\n\n  render() {\n    const KeyComponent = this.props.scale.IsBlack() ? BlackKey : WhiteKey;\n\n    return (\n      <KeyComponent isActive={this.state.isActive} onClick={(e: any) => this.onClickKey(e)}>\n        {this.state.notes.map((note) => {\n          return <Note scale={this.props.scale} />\n        })}\n        {this.props.children}\n      </KeyComponent>\n    )\n  }\n\n  onClickKey(e: Event) {\n    e.stopPropagation();\n    AudioManager.getInstance().play(this.props.scale.scale.toString() + this.props.scale.octave.toString());\n  }\n\n  OnNoteCreate(scale: Scale) {\n    const _notes = Object.assign([], this.state.notes);\n    _notes.push(1);\n    this.setState({ notes: _notes });\n    setTimeout(() => {\n      this.setState({ isActive: true });\n      setTimeout(() => {\n        this.setState({ isActive: false });\n      }, 500);\n    }, 5000);\n  }\n}\n\ninterface IProp {\n  scale: Scale;\n  children?: any;\n  width?: number;\n}\n\ninterface IState {\n  notes: number[];\n  isActive: boolean;\n}\n\nconst BaseKey = styled.div`\n`\n\nconst WhiteKey = styled(BaseKey)`\n  width: calc(100% / 7);\n  height: 300px;\n  box-sizing: border-box;\n  background-color: ${(props: { isActive: boolean }) => props.isActive ? `#91fff6` : `white`};\n  border: 1px solid black;\n  position: relative;\n`\n\nconst BlackKey = styled(BaseKey)`\n  width: calc(150% / 2);\n  height: 200px;\n  position: absolute;\n  background-color: ${(props: { isActive: boolean }) => props.isActive ? `#68777a` : `black`};\n  background-color: black;\n  left: calc(125%/2);\n  z-index: 20;\n`","import * as React from \"react\";\nimport Key from './Key';\nimport Scale, { ScaleName } from \"../../models/Scale\";\n\nconst Octave = (props: IProp) => {\n  return (\n    <div style={{ display: \"flex\", flexWrap: \"wrap\", width: 600, minWidth: 400, backgroundColor: \"white\" }}>\n      <Key scale={new Scale(ScaleName.C, props.octave)}>\n        <Key scale={new Scale(ScaleName.Csharp, props.octave)} />\n      </Key>\n      <Key scale={new Scale(ScaleName.D, props.octave)} >\n        <Key scale={new Scale(ScaleName.Dsharp, props.octave)} />\n      </Key>\n      <Key scale={new Scale(ScaleName.E, props.octave)} />\n      <Key scale={new Scale(ScaleName.F, props.octave)} >\n        <Key scale={new Scale(ScaleName.Fsharp, props.octave)} />\n      </Key>\n      <Key scale={new Scale(ScaleName.G, props.octave)}>\n        <Key scale={new Scale(ScaleName.Gsharp, props.octave)} />\n      </Key>\n      <Key scale={new Scale(ScaleName.A, props.octave)} >\n        <Key scale={new Scale(ScaleName.Asharp, props.octave)} />\n      </Key>\n      <Key scale={new Scale(ScaleName.B, props.octave)} />\n    </div>\n  )\n}\nexport default Octave;\n\ninterface IProp {\n  octave: number\n}","import * as React from 'react';\nimport Octave from './component/piano/Octave';\nimport AudioManager from './manager/AudioManager';\nimport Styled from \"styled-components\";\nimport Sequencer from './component/sequencer/Sequencer';\nimport MidiManager from './manager/SequenceManager';\n\nclass App extends React.Component {\n  constructor(props: any) {\n    super(props);\n    AudioManager.getInstance().load();\n    MidiManager.getInstance().load(\"/menuett.mid\", 2).then(() => {\n      MidiManager.getInstance().play();\n    });\n  }\n\n  public render() {\n    return (\n      <div className=\"App\">\n        {/* <Sequencer /> */}\n        <Keyboard>\n          <Octave octave={3} />\n          <Octave octave={4} />\n          <Octave octave={5} />\n          <Octave octave={6} />\n        </Keyboard>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\nconst Keyboard = Styled.div`\n  display: flex;\n  flexWrap: wrap; \n  height: 300px;\n  background-color: #222;\n  padding-top: calc(100vh - 400px);\n  width: 100%;\n  overflow-x: auto;\n`","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n"],"sourceRoot":""}